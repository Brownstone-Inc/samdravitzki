name: deploy

on:
  workflow_call:
    inputs:
      resourceGroup:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  validate-bicep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        name: Sign into Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: azure/bicep-deploy@v2
        name: Run preflight validation
        with:
          type: deployment
          operation: validate
          scope: resourceGroup
          name: ${{ github.run_number }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resource-group-name: ${{ inputs.resourceGroup }}
          template-file: ./iac/main.bicep
          action-on-unmanage-resources: delete

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: validate-bicep
    outputs:
      personalSiteResourceName: ${{ steps.deploy.outputs.personalSiteResourceName }}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: azure/bicep-deploy@v2
        name: Deploy infrastructure
        id: deploy
        with:
          type: deployment
          operation: create
          scope: resourceGroup
          name: ${{ github.run_number }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resource-group-name: ${{ inputs.resourceGroup }}
          template-file: ./iac/main.bicep
          action-on-unmanage-resources: delete

  deploy-site:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - uses: actions/download-artifact@v4
        name: Download site artifact
        with:
          name: personal-site

      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: azure/cli@v2
        name: Get deployment token
        id: get-deployment-token
        with:
          inlineScript: |
            deployment_token=::add-mask::(az staticwebapp secrets list --name ${{ needs.deploy-infrastructure.outputs.personalSiteResourceName }} --query "properties.apiKey")
            echo "deployment_token=$deployment_token" >> "$GITHUB_OUTPUT"

      - uses: Azure/static-web-apps-deploy@v1
        name: Deploy site
        with:
          # Need to dynamically get the deployment token and pass it to this action
          # masking = https://www.aaron-powell.com/posts/2022-07-14-working-with-add-mask-and-github-actions/
          # getting token = https://learn.microsoft.com/en-us/azure/static-web-apps/static-web-apps-cli-deploy
          azure_static_web_apps_api_token: ${{ steps.get-deployment-token.outputs.deployment_token }}
          app_location: "src/dist"
          output_location: ""
          skip_app_build: true
          action: "upload"
# Static site is being deployed, run smoke tests to validate deployment was successful
# smoke-test:
#   runs-on: ubuntu-latest
#   needs: deploy-infrastructure
#   steps:
#     - uses: actions/checkout@v3
#     - run: |
#         $container = New-PesterContainer `
#           -Path 'iac/tests/StaticWebApp.Tests.ps1' `
#           -Data @{ HostName = '${{needs.deploy-infrastructure.outputs.appHostName}}' }
#         Invoke-Pester `
#           -Container $container `
#           -CI
#       name: Run smoke tests
#       shell: pwsh
